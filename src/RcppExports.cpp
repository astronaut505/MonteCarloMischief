#include <Rcpp.h>
#include "Portfolio.h"

// This file is generated by Rcpp::compileAttributes() to register
// routines dynamically.
// Enable registration of routines.

// [[Rcpp::export]]
Rcpp::NumericVector price_portfolio(double S0, double sigma, double r, double d, double T,
                                    double K1, double K2, double K3, double K4, double barrierLevelDown, double barrierLevelUp);

RcppExport SEXP _portfolio_price_portfolio(SEXP S0SEXP, SEXP sigmaSEXP, SEXP rSEXP, SEXP dSEXP, SEXP TSEXP, SEXP K1SEXP, SEXP K2SEXP, SEXP K3SEXP, SEXP K4SEXP, SEXP barrierLevelDownSEXP, SEXP barrierLevelUpSEXP)
{
    BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter<double>::type S0(S0SEXP);
    Rcpp::traits::input_parameter<double>::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter<double>::type r(rSEXP);
    Rcpp::traits::input_parameter<double>::type d(dSEXP);
    Rcpp::traits::input_parameter<double>::type T(TSEXP);
    Rcpp::traits::input_parameter<double>::type K1(K1SEXP);
    Rcpp::traits::input_parameter<double>::type K2(K2SEXP);
    Rcpp::traits::input_parameter<double>::type K3(K3SEXP);
    Rcpp::traits::input_parameter<double>::type K4(K4SEXP);
    Rcpp::traits::input_parameter<double>::type barrierLevelDown(barrierLevelDownSEXP);
    Rcpp::traits::input_parameter<double>::type barrierLevelUp(barrierLevelUpSEXP);
    __result = Rcpp::wrap(price_portfolio(S0, sigma, r, d, T, K1, K2, K3, K4, barrierLevelDown, barrierLevelUp));
    return __result;
    END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_portfolio_price_portfolio", (DL_FUNC)&_portfolio_price_portfolio, 11},
    {NULL, NULL, 0}};

RcppExport void R_init_portfolio(DllInfo *dll)
{
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
